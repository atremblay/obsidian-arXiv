/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => main_default
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var fs = __toESM(require("fs"));
var path = __toESM(require("path"));
var DEFAULT_SETTINGS = {
  mySetting: "",
  enableRibbonIcon: false
};
var ArxivPlugin = class extends import_obsidian.Plugin {
  async fetchPaper(paperId, paperName) {
    if (paperId) {
      try {
        const data = await this.fetchPaperData(paperId, paperName);
        await this.createNote(data);
      } catch (error) {
        console.error("Error fetching paper data:", error);
        new import_obsidian.Notice(`Error fetching paper data: ${paperId}`);
      }
    }
  }
  fetchPaperData(id, name) {
    return new Promise((resolve2, reject) => {
      const url = `http://export.arxiv.org/api/query?id_list=${id}`;
      const xhr = new XMLHttpRequest();
      xhr.open("GET", url);
      xhr.onreadystatechange = () => {
        var _a, _b, _c, _d, _e;
        if (xhr.readyState === 4) {
          if (xhr.status === 200) {
            const parser = new DOMParser();
            const xmlDoc = parser.parseFromString(xhr.responseText, "application/xml");
            const entry = xmlDoc.querySelector("entry");
            if (entry) {
              const title = ((_a = entry.querySelector("title")) == null ? void 0 : _a.textContent) || "No Title";
              const authors = Array.from(entry.querySelectorAll("author name")).map((el) => el.textContent).join(", ") || "No Authors";
              const publicationDateRaw = (_b = entry.querySelector("published")) == null ? void 0 : _b.textContent;
              const publicationDate = publicationDateRaw ? new Date(publicationDateRaw).toISOString().split("T")[0] : "No Publication Date";
              const url2 = ((_c = entry.querySelector("id")) == null ? void 0 : _c.textContent) || "No URL";
              let summary = ((_d = entry.querySelector("summary")) == null ? void 0 : _d.textContent) || "No Summary";
              summary = summary.replace(/(\r\n|\n|\r)/gm, " ").trim();
              const pdfLink = ((_e = xmlDoc.querySelector('link[title="pdf"]')) == null ? void 0 : _e.getAttribute("href")) || "No PDF Link";
              if (name === void 0) {
                name = id;
              }
              resolve2({ title, authors, publicationDate, summary, id, url: url2, pdfLink, name });
            } else {
              reject(new Error("No entry found in the response"));
            }
          } else {
            reject(new Error("Failed to fetch data"));
          }
        }
      };
      xhr.send();
    });
  }
  async createNote(data) {
    const authorsList = data.authors.split(", ").map((author) => `  - "${author}"`).join("\n");
    const frontMatter = `---
title: "${data.title}"
authors:
${authorsList}
published: "${data.publicationDate}"
arXiv: "${data.url}"
paper: "${data.pdfLink}"
---
`;
    const content = `
#### Abstract

${data.summary}
		`;
    await this.app.vault.create(`${this.settings.mySetting}/${data.name}.md`, frontMatter + content);
    new import_obsidian.Notice(`Created note: ${data.name}`);
  }
  async onload() {
    await this.loadSettings();
    this.arXivLogo = await this.readSVGFile();
    this.enableRibbonIcon();
    const statusBarItemEl = this.addStatusBarItem();
    statusBarItemEl.setText("Status Bar Text");
    this.addCommand({
      id: "open-arXiv-modal",
      name: "Fetch arXiv paper info",
      callback: () => {
        new ArXivModal(this.app, (paperId, paperName) => {
          this.fetchPaper(paperId, paperName);
        }).open();
      }
    });
    this.addSettingTab(new ArXivSettingTab(this.app, this));
  }
  onunload() {
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
  async readSVGFile() {
    const filePath = path.resolve(
      this.app.vault.adapter.basePath,
      this.manifest.dir,
      "arxiv-logomark.svg"
    );
    return new Promise((resolve2, reject) => {
      fs.readFile(filePath, "utf8", (err, data) => {
        if (err) {
          console.error("Error reading SVG file:", err);
          reject("");
        } else {
          resolve2(data);
        }
      });
    });
  }
  enableRibbonIcon() {
    var _a;
    if (this.settings.enableRibbonIcon & this.arXivLogo != "") {
      (0, import_obsidian.addIcon)("arXiv", this.arXivLogo);
      this.addRibbonIcon("arXiv", "arXiv fetch paper", () => {
        new ArXivModal(this.app, (paperId, paperName) => {
          this.fetchPaper(paperId, paperName);
        }).open();
      }).setAttribute("id", "rb-arXiv-icon");
    } else {
      (_a = document.getElementById("rb-arXiv-icon")) == null ? void 0 : _a.remove();
    }
  }
};
var ArXivSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    new import_obsidian.Setting(containerEl).setName("Save path").setDesc("Enter the path where you want to save the file").addText(
      (text) => text.setValue(this.plugin.settings.mySetting).onChange(async (value) => {
        this.plugin.settings.mySetting = value;
        await this.plugin.saveSettings();
      })
    );
    new import_obsidian.Setting(containerEl).setName("Enable ribbon icon").addToggle(
      (toggle) => toggle.setValue(this.plugin.settings.enableRibbonIcon).onChange((value) => {
        this.plugin.settings.enableRibbonIcon = value;
        this.plugin.saveSettings();
        this.plugin.enableRibbonIcon();
      })
    );
  }
};
var ArXivModal = class extends import_obsidian.Modal {
  constructor(app, onSubmit) {
    super(app);
    this.onSubmit = onSubmit;
  }
  onOpen() {
    const { contentEl } = this;
    new import_obsidian.Setting(contentEl).setName("arXiv id:").addText((text) => text.onChange((value) => {
      this.arXivID = value;
    }));
    new import_obsidian.Setting(contentEl).setName("Paper name (optional):").addText((text) => text.onChange((value) => {
      this.paperName = value;
    }));
    new import_obsidian.Setting(contentEl).addButton((btn) => btn.setButtonText("Fetch").setCta().onClick(() => {
      this.close();
      this.onSubmit(this.arXivID, this.paperName);
    }));
  }
  onClose() {
    const { contentEl } = this;
    contentEl.empty();
  }
};
var main_default = ArxivPlugin;
//# sourceMappingURL=data:application/json;base64,
